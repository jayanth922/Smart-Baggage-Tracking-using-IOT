#include <TinyGPS++.h> 
#include <SoftwareSerial.h> 
#include "ThingSpeak.h" 
#include <ESP8266WiFi.h> 
#include<LiquidCrystal_I2C.h> 
#include<Wire.h> 
LiquidCrystal_I2C lcd(0x27, 16, 2); 
static const int RX= D6, TX= D7; 
static const uint32_t GPSBaud = 9600; 
const char* ssid = "vivo 1902"; 
const char* password = "rohith123"; 
unsigned long ch_no = 1929135; 
const char * write_api = "DIE13UFQ8KK0DXLT"; 
TinyGPSPlus gps; 
WiFiClient client; 
WiFiServer server(80); 
SoftwareSerial soft(RX, TX); 
String latitude_data; 
String longitude_data; 
void setup() 
{ 
 Wire.begin(D2, D1); 
 //lcd.begin(16, 2); 
 lcd.begin(); 
//lcd.init(); 
 lcd.backlight(); 
 lcd.setCursor(0, 0); 
 lcd.print("Smart Baggage Tracking using IoT-1"); 
 lcd.setCursor(0, 1); 
 lcd.print("Smart Baggage Tracking using IoT"); 
 delay(2000); 
 lcd.clear(); 
 Serial.begin(115200); 
 soft.begin(GPSBaud); 
 WiFi.begin(ssid, password); 
 server.begin(); 
 while (WiFi.status() != WL_CONNECTED) 
 { 
 delay(500); 
 lcd.setCursor(0, 0); 
 lcd.print("WiFi not yet connected"); 
 } 
 lcd.setCursor(0, 0); 
 lcd.print("WiFi connected Ready to Use"); 
 lcd.setCursor(0, 1); 
 lcd.print(WiFi.localIP()); 
 ThingSpeak.begin(client); 
} 
void loop() 
{ 
 b1(); 
 while (soft.available() > 0) 
 if (gps.encode(soft.read())) 
 { 
 displaydata(); 
 displaywebpage(); 
 } 
 if (millis() > 5000 && gps.charsProcessed()<10) 
 { 
 Serial.println(F("GPS Connection Failed problem with location ")); 
 while (true); 
 } 
 if (client.connect(server,80)) 
 { 
 thingspeak(); 
 } 
} 
void displaydata() 
{ 
 if (gps.location.isValid()) 
 { 
 double latitude = (gps.location.lat());
 double longitude = (gps.location.lng()); 
 latitude_data= (String(latitude, 6)); 
 longitude_data= (String(longitude, 6)); 
 ThingSpeak.setField(1, latitude_data); 
 ThingSpeak.setField(2, longitude_data); 
 ThingSpeak.writeFields(ch_no, write_api); 
 delay(20000); 
 } 
 else 
 { 
 Serial.println(F("Data error!!!")); 
 } 
} 
void b1() 
{ 
 // Clears the trigPin 
 digitalWrite(trigPin, LOW); 
 delayMicroseconds(2); 
 
 digitalWrite(trigPin, HIGH); 
 delayMicroseconds(10); 
 digitalWrite(trigPin, LOW); 
 
 duration = pulseIn(echoPin, HIGH) ; 
 distance= duration*0.034/2; 
 Serial.println("Distance =" + String(distance) + " cm"); 
} 
void thingspeak() 
{ 
 String postStr = apiKey; 
 postStr +="&field3="; 
 postStr += String(distance); 
 postStr += "\r\n\r\n"; 
 
 client.print("POST /update HTTP/1.1\n"); 
 client.print("Host: api.thingspeak.com\n"); 
 client.print("Connection: close\n"); 
 client.print("X-THINGSPEAKAPIKEY: "+apiKey+"\n"); 
 client.print("Content-Type: application/x-www-form-urlencoded\n"); 
 client.print("Content-Length: "); 
 client.print(postStr.length()); 
 client.print("\n\n"); 
 client.print(postStr); 
 
 Serial.println("Send data to thingspeak: "); 
 Serial.print("Content-Length: "); 
 Serial.print(postStr.length()); 
 Serial.print(" Field-1: "); 
 Serial.print(distance); // ultrasonic data 
 Serial.println(" data send"); 
} 
void displaywebpage() 
{ 
 WiFiClient client = server.available(); 
 if (!client) 
 { 
 return; 
 } 
 String page = "<html><p><a 
href=""http://maps.google.com/maps?&z=15&mrt=yp&t=k&q="; 
 page += latitude_data; 
 page += "+"; 
 page += longitude_data; 
 page += ">Track</a></html>"; 
 client.print(page); 
 delay(100);} 
